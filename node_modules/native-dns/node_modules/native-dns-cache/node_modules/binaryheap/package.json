{
  "name": "binaryheap",
  "version": "0.0.3",
  "author": {
    "name": "Timothy J Fontaine",
    "email": "tjfontaine@gmail.com",
    "url": "http://atxconsulting.com"
  },
  "description": "A simple binary heap",
  "keywords": [
    "balanced",
    "binary",
    "heap",
    "minheap",
    "maxheap"
  ],
  "homepage": "http://github.com/tjfontaine/node-binaryheap",
  "bugs": {
    "url": "http://github.com/tjfontaine/node-binaryheap/issues"
  },
  "repository": {
    "type": "git",
    "url": "http://github.com/tjfontaine/node-binaryheap.git"
  },
  "main": "binaryheap.js",
  "engines": {
    "node": ">= 0.6.0"
  },
  "scripts": {
    "test": "node test"
  },
  "devDependencies": {
    "tap": ">= 0.4.0"
  },
  "readme": "BinaryHeap\n==========\n\nBasic binary heap tree using linked lists\n\nUsage\n-----\n\n```javascript\nvar BinaryHeap = require('binaryheap');\nvar heap = new BinaryHeap();\n\nvar a = [6, 5, 3, 1, 8, 7, 2, 4];\n\na.forEach(function (k) {\n  heap.insert({ value: k }, k);\n});\n\nheap.print();\n\nwhile (heap.length) {\n  console.log('popping', heap.pop().value);\n}\n```\n\nBy default it stores as a max-heap, if you pass truthy to the constructor though\nit will behave as a min-heap.\n\nMethods\n-------\n\n * `insert(obj, key)` -- obj can be any new or existing object, and key is any\nvalue that behaves sanely with `>` or `<`\n * `pop()` -- removes and returns the maximum or minimum object from the root\nof the heap\n * `remove(obj)` -- removes a previously inserted object from the heap\n * `print()` -- mostly for debugging purposes prints a graphviz dot style\ndigraph to confirm ordering\n\nMembers\n-------\n\n * `length` -- number of objects currently in the heap\n",
  "readmeFilename": "README.md",
  "_id": "binaryheap@0.0.3",
  "_from": "binaryheap@>= 0.0.3"
}
